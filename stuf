local Tab2 = Window:CreateTab("Misc", "folder-cog")
local Section = Tab2:CreateSection("Misc Settings")

getgenv().VState3 = false
local Toggle3 = Tab2:CreateToggle({
    Name = "Auto-Restart",
    CurrentValue = false,
    Flag = "Toggle3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().VState3 = Value
        if getgenv().VState3 == true then
            while getgenv().VState3 == true do
                task.wait(1)
                if  game:GetService("ReplicatedStorage").Remotes:FindFirstChild("VoteRestart") then
                    if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Retry.Visible == true then
                        game:GetService("ReplicatedStorage").Remotes.VoteRestart:FireServer()
                    end
                end
            end
        else
            return
        end
    end,
 })

 getgenv().VState7 = false
 local Toggle3 = Tab2:CreateToggle({
     Name = "Auto-TurkeyCrate",
     CurrentValue = false,
     Flag = "Toggle7", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
     Callback = function(Value)
         getgenv().VState7 = Value
         if getgenv().VState7 == true then
             while getgenv().VState7 == true do
                 task.wait(1)
                
                 if game.Workspace:FindFirstChild("T0") ~= nil then
                    repeat
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.Anchored = true
                        task.wait(0.25)
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(2,1,2)
                        task.wait(4)
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.Anchored = false
                        task.wait(0.25)
                        if game.Workspace:FindFirstChild("T0") == nil then break end
                        game.Workspace.T0.Root.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(10,1,10)
                        task.wait(1)
                    until game.Workspace:FindFirstChild("T0") == nil
                    break
                end

             end
         else
             return
         end
     end,
  })

getgenv().DMap = nil
 local Dropdown = Tab2:CreateDropdown({
    Name = "Select Difficulty",
    Options = {"Easy","Medium","Hard","Expert","BossRushOne"},
    CurrentOption = {"Select an option!"},
    MultipleOptions = false,
    Flag = "Dropdown2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Options)
        getgenv().DMap = Options[1]
        Rayfield:Notify({
            Title = "Difficulty Selected!",
            Content = "Selected Difficulty: "..Options[1],
            Duration = 4,
            Image = "rewind",
        })
    end,
 })

 getgenv().VState4 = false
local Toggle4 = Tab2:CreateToggle({
    Name = "Auto-Difficulty",
    CurrentValue = false,
    Flag = "Toggle4", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().VState4 = Value
        if getgenv().VState4 == true then
            
            if getgenv().DMap ~= nil then
                while getgenv().VState4 == true do
                    task.wait(1)
                    if game:GetService("ReplicatedStorage").Remotes:FindFirstChild("VoteDifficulty") then
                        if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.Difficulty.Visible == true then
                            local ohString1 = tostring(getgenv().DMap)
                            game:GetService("ReplicatedStorage").Remotes.VoteDifficulty:FireServer(ohString1)
                        end
                    end
                end
            else
                Rayfield:Notify({
                    Title = "Warning!",
                    Content = "You need to select a Difficulty first!",
                    Duration = 4,
                    Image = "rewind",
                })
            end

        else
            return
        end
    end,
 })

 getgenv().SSpeed = 1
 local Slider = Tab2:CreateSlider({
    Name = "Speed Modifier",
    Range = {0, 4},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 1,
    Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().SSpeed = Value
    end,
 })

 getgenv().VState5 = false
local Toggle5 = Tab2:CreateToggle({
    Name = "Auto-Speed",
    CurrentValue = false,
    Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        getgenv().VState5 = Value
        if getgenv().VState5 == true then
            
            if getgenv().SSpeed ~= nil then
                while getgenv().VState5 == true do
                    task.wait(1)
                    if game:GetService("ReplicatedStorage").Remotes:FindFirstChild("SetSpeedUp") then
                        local ohNumber1 = tonumber(getgenv().SSpeed)
                        game:GetService("ReplicatedStorage").Remotes.SetSpeedUp:FireServer(ohNumber1)
                    end
                end
            else
                Rayfield:Notify({
                    Title = "Warning!",
                    Content = "You need to select a Speed first!",
                    Duration = 4,
                    Image = "rewind",
                })
            end

        else
            return
        end
    end,
 })

 getgenv().VState6 = false
 local Toggle6 = Tab2:CreateToggle({
     Name = "Auto-Skip",
     CurrentValue = false,
     Flag = "Toggle6", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
     Callback = function(Value)
         getgenv().VState6 = Value
         if getgenv().VState6 == true then
             
            while getgenv().VState6 == true do
                task.wait(1)
                if game:GetService("ReplicatedStorage").Remotes:FindFirstChild("SkipVote") then
                    game:GetService("ReplicatedStorage").Remotes.SkipVote:FireServer()
                end
            end
 
         else
             return
         end
     end,
  })

local Section = Tab2:CreateSection("Other")
local Button = Tab2:CreateButton({
    Name = "Lobby",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.ReturnToLobby:FireServer()
    end,
 })
 
local Paragraph = Tab2:CreateParagraph({Title = "Warning!", Content = "Make sure to disable all toggles before destroying the interface! Otherwise they will keep working."})
local Button = Tab2:CreateButton({
   Name = "Destroy Interface",
   Callback = function()
      Rayfield:Destroy()
   end,
})

-- End
