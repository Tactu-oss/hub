local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local Tab = Window:CreateTab("Tab Example", "rewind")
 local Button = Tab:CreateButton({
    Name = "Button Example",
    Callback = function()
        Rayfield:Destroy()
    end,
 })

 local Slider = Tab:CreateSlider({
    Name = "Slider Example",
    Range = {0, 100},
    Increment = 10,
    Suffix = "Bananas",
    CurrentValue = 10,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    -- The function that takes place when the slider changes
    -- The variable (Value) is a number which correlates to the value the slider is currently at
    end,
 })

-- API URLs
local apiBaseUrl = "https://your-api.com"
local userId = tostring(game.Players.LocalPlayer.UserId) -- Unique user ID

-- Load the saved option from the cloud
local function loadData()
    local response
    local success, err = pcall(function()
        response = game:HttpGet(apiBaseUrl .. "/getdata?userid=" .. userId)
    end)
    if success and response then
        return response -- Assuming the API returns the saved option as a plain string
    else
        print("Failed to load data:", err)
        return "Option 1" -- Default fallback
    end
end

-- Save the selected option to the cloud
local function saveData(option)
    local success, err = pcall(function()
        game:HttpPost(apiBaseUrl .. "/savedata", 
            game.HttpService:JSONEncode({
                userid = userId,
                option = option
            }), 
            Enum.HttpContentType.ApplicationJson
        )
    end)
    if not success then
        print("Failed to save data:", err)
    end
end

-- Initialize the dropdown with saved data
local savedOption = loadData()

local Dropdown = Tab:CreateDropdown({
    Name = "Dropdown Example",
    Options = {"Option 1", "Option 2", "Option 3", "Option 4", "Option 5"},
    CurrentOption = {savedOption}, -- Use the saved option
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        local selectedOption = Options[1]
        saveData(selectedOption) -- Save to the cloud
        print("Option saved to the cloud:", selectedOption)
    end,
})
