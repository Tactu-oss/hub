local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Tactu-oss/hub/refs/heads/main/Rayfield2'))()

local Window = Rayfield:CreateWindow({
    Name = "Legacy Hub",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Legacy Hub",
    LoadingSubtitle = "by King",
    Theme = "Dark Blue", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Legacy Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "gDKjAr4R", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Legacy Hub",
       Subtitle = "Freemium Key System",
       Note = 'Get your key by clicking the<font color="#32CD32"> "Get a Script Key" '.."</font>button! or alternatively, you can visit our discord below!", -- Use this to tell the user how to get a key
       FileName = "LegacyKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

local Tab = Window:CreateTab("Macro", 4483362458) -- Title, Image
local Section = Tab:CreateSection("Half-Macro Stuff")

getgenv().PlayerTV = nil
 local Input = Tab:CreateInput({
   Name = "Input your roblox name here:",
   CurrentValue = "",
   PlaceholderText = "Input Placeholder",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
      getgenv().PlayerTV = Text
      print(Text)

      if getgenv().PlayerTV ~= nil and game.Players:FindFirstChild(tostring(getgenv().PlayerTV)) then
         Rayfield:Notify({
            Title = "Player found!",
            Content = "You can now go and toggle camera view",
            Duration = 6,
            Image = "rewind",
         })
      else
         Rayfield:Notify({
            Title = "Player not found!",
            Content = "Make sure to write your main player name and not your nickname.",
            Duration = 6,
            Image = "rewind",
         })
      end

   end,
})

getgenv().VState = false
local Toggle = Tab:CreateToggle({
   Name = "Toggle Camera View Top-Down",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
      if getgenv().PlayerTV ~= nil and game.Players:FindFirstChild(tostring(getgenv().PlayerTV)) then
         print(getgenv().PlayerTV)
         local Plr = game.Players:FindFirstChild(tostring(getgenv().PlayerTV))
         local Char = Plr.Character
         local Primary = Char:WaitForChild("HumanoidRootPart")
         
         local Cam = workspace.CurrentCamera
         local StudsY = 20
         
         local function Enable()
            Cam.CameraType = Enum.CameraType.Scriptable
            getgenv().VState = true
            game["Run Service"].RenderStepped:Connect(function()
               if getgenv().VState == false then
                  return
               end
               Cam.CFrame = CFrame.new(Primary.Position.X,StudsY,Primary.Position.Z) * CFrame.Angles(math.rad(-90),0,0)
            end)
         end

         local function Disable()
            getgenv().VState = false
            Cam.CameraType = Enum.CameraType.Custom
         end

         if Value == true then
            Enable()
         else
            Disable()
         end
      end
   end,
})

local Button = Tab:CreateButton({
   Name = "Delete Interface",
   Callback = function()
      Rayfield:Destroy()
   end,
})
